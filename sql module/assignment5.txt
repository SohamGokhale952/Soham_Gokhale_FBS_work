Q1.List all the books that are written by Author Loni and has price less then 600.

mysql> select book_name from books where author_name="loni" and cost<600;
+---------------------+
| +book_name           |
+---------------------+
| Oracle Complete Ref |
| Mastering SQL       |
+---------------------+
2 rows in set (0.05 sec)

Q2.List the Issue details for the books that are not returned yet.

mysql> select * from issue where returned_date is  null;
+--------------+---------+-----------+------------+---------------+
| lib_issue_id | book_no | member_id | issue_date | returned_date |
+--------------+---------+-----------+------------+---------------+
|         7002 |     102 |         2 | 2006-12-25 | NULL          |
|         7004 |     101 |         1 | 2006-07-04 | NULL          |
|         7006 |     101 |         3 | 2006-02-18 | NULL          |
+--------------+---------+-----------+------------+---------------+
3 rows in set (0.00 sec)


Q3.Update all the blank return_date with 31-Dec-06 excluding 7005 and 7006.

mysql> update issue set return_date='31-12-06' where lib_issue_id not in(7005,7006) and return_date is null;

mysql> select*from issue;
+--------------+---------+-----------+------------+-------------+
| lib_issue_id | book_no | member_id | issue_date | return_date |
+--------------+---------+-----------+------------+-------------+
|         7001 |     101 |         1 | 2006-12-10 | 2006-12-20  |
|         7002 |     102 |         2 | 2006-12-25 | 2031-12-06  |
|         7003 |     104 |         1 | 2006-01-15 | 2006-01-30  |
|         7004 |     101 |         1 | 2006-07-04 | 2031-12-06  |
|         7005 |     104 |         2 | 2006-11-15 | 2006-11-25  |
|         7006 |     101 |         3 | 2006-02-18 | NULL        |
+--------------+---------+-----------+------------+-------------+
6 rows in set (0.00 sec)

Q4.List all the Issue details that have books issued for more then 30
days.

mysql> select * from issue where return_date is null or datediff(return_date,issue_date)>30;
+--------------+---------+-----------+------------+-------------+
| lib_issue_id | book_no | member_id | issue_date | return_date |
+--------------+---------+-----------+------------+-------------+
|         7002 |     102 |         2 | 2006-12-25 | 2031-12-06  |
|         7004 |     101 |         1 | 2006-07-04 | 2031-12-06  |
|         7006 |     101 |         3 | 2006-02-18 | NULL        |
+--------------+---------+-----------+------------+-------------+
3 rows in set (0.00 sec)

Q5.List all the books that have price in range of 500 to 750 and has
category as Database.

mysql> select*from books where cost  between 500 and 750 and category ="database";
+---------+---------------------+-------------+--------+----------+
| Book_No | Book_Name           | Author_name | cost   | Category |
+---------+---------------------+-------------+--------+----------+
|     120 | Oracle Complete Ref | Loni        | 550.00 | Database |
|     140 | PL SQL-Ref          | Scott Urman | 750.00 | Database |
+---------+---------------------+-------------+--------+----------+

Q6.List all the books that belong to any one of the following
categories Science, Database, Fiction, Management.

mysql> select*from books where category in ('Science', 'Database', 'Fiction', 'Management');
+---------+------------------------------------------+--------------+--------+----------+
| Book_No | Book_Name                                | Author_name  | cost   | Category |
+---------+------------------------------------------+--------------+--------+----------+
|     108 | Harry Potter and the Philosopher's Stone | J.K. Rowling | 500.00 | Fiction  |
|     109 | The Alchemist                            | Paulo Coelho | 300.00 | Fiction  |
|     112 | To Kill a Mockingbird                    | Harper Lee   | 400.00 | Fiction  |
|     120 | Oracle Complete Ref                      | Loni         | 550.00 | Database |
|     130 | Mastering SQL                            | Loni         | 250.00 | Database |
|     140 | PL SQL-Ref                               | Scott Urman  | 750.00 | Database |
+---------+------------------------------------------+--------------+--------+----------+
6 rows in set (0.06 sec)

Q7.List all the members in the descending order of Penalty due on
them.

mysql> select* from member order by Penalty_Amount desc;
+-----------+--------------+----------------+---------------+-----------------+-----------+-------------------+----------------+
| member_id | member_name  | Member_address | Acc_Open_Date | Membership_type | Fees_paid | max_books_allowed | Penalty_Amount |
+-----------+--------------+----------------+---------------+-----------------+-----------+-------------------+----------------+
|         1 | Richa Sharma | Pune           | 2005-10-12    | Lifetime        |     25000 |                 5 |          50.00 |
|         3 | Sneha Patil  | Delhi          | 2009-07-15    | Lifetime        |     20000 |                 6 |          40.00 |
|         6 | Karan Mehta  | Hyderabad      | 2016-09-05    | Lifetime        |     22000 |                 5 |          35.00 |
|         5 | Priya Nair   | Bangalore      | 2013-05-18    | Annual          |      6000 |                 4 |          25.00 |
|         2 | Amit Verma   | Mumbai         | 2007-03-21    | Annual          |      5000 |                 4 |          20.00 |
|         4 | Rajesh Singh | Nagpur         | 2011-11-30    | Half-Yearly     |      3000 |                 3 |          15.00 |
|        90 | garima Verma | Mumbai         | 2007-03-21    | Annual          |     50000 |                40 |           NULL |
+-----------+--------------+----------------+---------------+-----------------+-----------+-------------------+----------------+

Q8.Modify the price of book with id 103 to Rs 300 and category to
RDBMS.

mysql> select*from books;
+---------+------------------------------------------+-----------------+---------+----------+
| Book_No | Book_Name                                | Author_name     | cost    | Category |
+---------+------------------------------------------+-----------------+---------+----------+
|     101 | Let us C                                 | Denis Ritchie   |  450.00 | System   |
|     106 | Operating Systems                        | Galvin          |  700.00 | System   |
|     108 | Harry Potter and the Philosopher's Stone | J.K. Rowling    |  500.00 | Fiction  |
|     109 | The Alchemist                            | Paulo Coelho    |  300.00 | Fiction  |
|     111 | C Programming Language                   | Brian Kernighan |  550.00 | System   |
|     112 | To Kill a Mockingbird                    | Harper Lee      |  400.00 | Fiction  |
|     113 | Unix System Programming                  | William Stevens |  720.00 | System   |
|     115 | Miscellaneous Essays                     | Various         |  200.00 | Others   |
|     119 | National Geographic                      | Adis Scott      | 1000.00 | Others   |
|     120 | Oracle Complete Ref                      | Loni            |  550.00 | Database |
|     130 | Mastering SQL                            | Loni            |  250.00 | Database |
|     140 | PL SQL-Ref                               | Scott Urman     |  750.00 | Database |
+---------+------------------------------------------+-----------------+---------+----------+
12 rows in set (0.00 sec)

Q9.List all the books in ascending order of category and descending
order of price.

mysql> select*from books order by category ,cost desc;
+---------+------------------------------------------+-----------------+---------+----------+
| Book_No | Book_Name                                | Author_name     | cost    | Category |
+---------+------------------------------------------+-----------------+---------+----------+
|     113 | Unix System Programming                  | William Stevens |  720.00 | System   |
|     106 | Operating Systems                        | Galvin          |  700.00 | System   |
|     111 | C Programming Language                   | Brian Kernighan |  550.00 | System   |
|     101 | Let us C                                 | Denis Ritchie   |  450.00 | System   |
|     108 | Harry Potter and the Philosopher's Stone | J.K. Rowling    |  500.00 | Fiction  |
|     112 | To Kill a Mockingbird                    | Harper Lee      |  400.00 | Fiction  |
|     109 | The Alchemist                            | Paulo Coelho    |  300.00 | Fiction  |
|     140 | PL SQL-Ref                               | Scott Urman     |  750.00 | Database |
|     120 | Oracle Complete Ref                      | Loni            |  550.00 | Database |
|     130 | Mastering SQL                            | Loni            |  250.00 | Database |
|     119 | National Geographic                      | Adis Scott      | 1000.00 | Others   |
|     115 | Miscellaneous Essays                     | Various         |  200.00 | Others   |
+---------+------------------------------------------+-----------------+---------+----------+

Q10.List all the books that contain word SQL in the name of the book. 

mysql> select*from books where book_name like "%sql%";
+---------+---------------+-------------+--------+----------+
| Book_No | Book_Name     | Author_name | cost   | Category |
+---------+---------------+-------------+--------+----------+
|     130 | Mastering SQL | Loni        | 250.00 | Database |
|     140 | PL SQL-Ref    | Scott Urman | 750.00 | Database |
+---------+---------------+-------------+--------+----------+
2 rows in set (0.02 sec)

Q11.List the Lib_Issue_Id, Issue_Date, Return_Date and No of days
Book was issued.

mysql> select lib_issue_id,issue_date,return_date,datediff(curdate(),issue_date) from issue;
+--------------+------------+-------------+--------------------------------+
| lib_issue_id | issue_date | return_date | datediff(curdate(),issue_date) |
+--------------+------------+-------------+--------------------------------+
|         7001 | 2006-12-10 | 2006-12-20  |                           6841 |
|         7002 | 2006-12-25 | 2031-12-06  |                           6826 |
|         7003 | 2006-01-15 | 2006-01-30  |                           7170 |
|         7004 | 2006-07-04 | 2031-12-06  |                           7000 |
|         7005 | 2006-11-15 | 2006-11-25  |                           6866 |
|         7006 | 2006-02-18 | NULL        |                           7136 |
+--------------+------------+-------------+--------------------------------+
6 rows in set (0.00 sec)

Q12.Find the details of the member of the Library in the order of their
joining the library.

mysql> select *from member order by Acc_Open_Date;
+-----------+--------------+----------------+---------------+-----------------+-----------+-------------------+----------------+
| member_id | member_name  | Member_address | Acc_Open_Date | Membership_type | Fees_paid | max_books_allowed | Penalty_Amount |
+-----------+--------------+----------------+---------------+-----------------+-----------+-------------------+----------------+
|         1 | Richa Sharma | Pune           | 2005-10-12    | Lifetime        |     25000 |                 5 |          50.00 |
|         2 | Amit Verma   | Mumbai         | 2007-03-21    | Annual          |      5000 |                 4 |          20.00 |
|        90 | garima Verma | Mumbai         | 2007-03-21    | Annual          |     50000 |                40 |           NULL |
|         3 | Sneha Patil  | Delhi          | 2009-07-15    | Lifetime        |     20000 |                 6 |          40.00 |
|         4 | Rajesh Singh | Nagpur         | 2011-11-30    | Half-Yearly     |      3000 |                 3 |          15.00 |
|         5 | Priya Nair   | Bangalore      | 2013-05-18    | Annual          |      6000 |                 4 |          25.00 |
|         6 | Karan Mehta  | Hyderabad      | 2016-09-05    | Lifetime        |     22000 |                 5 |          35.00 |
+-----------+--------------+----------------+---------------+-----------------+-----------+-------------------+----------------+
7 rows in set (0.02 sec)

Q13.Display the count of total no of books issued to Member 101.

mysql>  select count(book_no) from issue where member_id =1;
+----------------+
| count(book_no) |
+----------------+
|              3 |
+----------------+
1 row in set (0.06 sec)

Q14.Display the total penalty due for all the members.

mysql> select member_name, penalty_amount from member;
+--------------+----------------+
| member_name  | penalty_amount |
+--------------+----------------+
| Richa Sharma |          50.00 |
| Amit Verma   |          20.00 |
| Sneha Patil  |          40.00 |
| Rajesh Singh |          15.00 |
| Priya Nair   |          25.00 |
| Karan Mehta  |          35.00 |
| garima Verma |           NULL |
+--------------+----------------+

Q15.Display the total no of members

mysql> select count(member_id) "total members" from member;
+---------------+
| total members |
+---------------+
|             7 |
+---------------+
1 row in set (0.00 sec)

Q16.Display the total no of books issued

mysql> SELECT COUNT(*) AS total_books_issued
    -> FROM issue;
+--------------------+
| total_books_issued |
+--------------------+
|                  6 |
+--------------------+

Q17.Display the average membership fees paid by all the members

mysql> select avg(Fees_paid) as "average fee paid" from member;
+------------------+
| average fee paid |
+------------------+
|       18714.2857 |
+------------------+

Q18.List the various categories and count of books in each category.

mysql> select category,count(*) from books group by Category;
+----------+----------+
| category | count(*) |
+----------+----------+
| System   |        4 |
| Fiction  |        3 |
| Others   |        2 |
| Database |        3 |
+----------+----------+
4 rows in set (0.07 sec)

Q19.List the book_No and the number of times the book is issued in the
descending order of count.

mysql> select book_no,count(*) from issue group by book_no order by count(*) desc;
+---------+----------+
| book_no | count(*) |
+---------+----------+
|     101 |        3 |
|     104 |        2 |
|     102 |        1 |
+---------+----------+

Q20.Find the maximum, minimum, total and average penalty amount in
the member table.

mysql> select max(Penalty_Amount),min(Penalty_Amount),avg(Penalty_Amount)from member;
+---------------------+---------------------+---------------------+
| max(Penalty_Amount) | min(Penalty_Amount) | avg(Penalty_Amount) |
+---------------------+---------------------+---------------------+
|               50.00 |               15.00 |           30.833333 |
+---------------------+---------------------+---------------------+

Q21.Display the member id and the no of books for each member that
has issued more then 2 books.

SELECT member_id, COUNT(*) AS no_of_books
FROM issue
GROUP BY member_id
HAVING COUNT(*) > 2;
+-----------+----------+
| member_id | count(*) |
+-----------+----------+
|         1 |        3 |
+-----------+----------+
1 row in set (0.06 sec)

Q22.Display the member id, book no and no of times the same book is
issued by the member in the descending order of count.

mysql> select member_id,book_no,count(book_no) from issue group by member_id,book_no order by count(*) desc;
+-----------+---------+----------------+
| member_id | book_no | count(book_no) |
+-----------+---------+----------------+
|         1 |     101 |              2 |
|         2 |     102 |              1 |
|         1 |     104 |              1 |
|         2 |     104 |              1 |
|         3 |     101 |              1 |
+-----------+---------+----------------+
5 rows in set (0.00 sec)

Q23.Display the month and no of books issued each month in the
descending order of count.

mysql> SELECT book_no, MONTH(issue_date) AS issue_month, COUNT(*) AS times_issued
    -> FROM issue
    -> GROUP BY book_no, MONTH(issue_date);
+---------+-------------+--------------+
| book_no | issue_month | times_issued |
+---------+-------------+--------------+
|     101 |          12 |            1 |
|     102 |          12 |            1 |
|     104 |           1 |            1 |
|     101 |           7 |            1 |
|     104 |          11 |            1 |
|     101 |           2 |            1 |
+---------+-------------+--------------+
6 rows in set (0.00 sec)

Q24.List the book_no of all the books that are not issued to any

member so far.

mysql> SELECT book_no
    -> FROM issue
    -> WHERE issue_date IS NULL
    -> GROUP BY book_no;
Empty set (0.02 sec)

Q25.List all the member id that exist in member table and has also at
least one book issued by them.

mysql> select m.member_id,m.member_name from member m join issue i on m.member_id=i.member_id group by m.member_id having count(book_no)>=1;
+-----------+--------------+
| member_id | member_name  |
+-----------+--------------+
|       101 | Richa Sharma |
|       102 | Amit Verma   |
|       103 | Sneha Patil  |
+-----------+--------------+
3 rows in set (0.00 sec)

Q26.List the member ID with highest and lowest no of books issued.


mysql> (select m.member_id,m.member_name,count(book_no) from member m inner join issue i on m.member_id=i.member_id group by i.member_id,m.member_name order by count(book_no) desc limit 1)
    -> union
    ->  (select m.member_id,m.member_name,count(book_no) from member m inner join issue i on m.member_id=i.member_id group by i.member_id,m.member_name order by count(book_no) asc limit 1);
+-----------+--------------+----------------+
| member_id | member_name  | count(book_no) |
+-----------+--------------+----------------+
|       101 | Richa Sharma |              3 |
|       103 | Sneha Patil  |              1 |
+-----------+--------------+----------------+
2 rows in set (0.05 sec)


Q27.List all the Issue_details for books issued in December and July
without using any arithmetic, Logical or comparison operator.

mysql> select * from issue where month(issue_date) in (12,7);
+--------------+---------+-----------+------------+-------------+
| lib_issue_id | book_no | member_id | issue_date | return_date |
+--------------+---------+-----------+------------+-------------+
|         7001 |     101 |       101 | 2006-12-10 | 2006-12-20  |
|         7002 |     102 |       102 | 2006-12-25 | 2031-12-06  |
|         7004 |     101 |       101 | 2006-07-04 | 2031-12-06  |
+--------------+---------+-----------+------------+-------------+
3 rows in set (0.00 sec)

Q28.List the Book_No, Book_Name and Issue_date for all the books
that are issued in month of December and belong to category Database.

mysql> select i.book_no,b.book_name,i.issue_date from issue i inner join books b on i.book_no=b.book_no where month(issue_date)=12 and category="database";
Empty set (0.00 sec)

Q29.List the Member Id, Member Name and max books allowed in the
descending order of the max books allowed.

mysql> select member_id,member_name,max_books_allowed from member order by max_books_allowed desc;
+-----------+--------------+-------------------+
| member_id | member_name  | max_books_allowed |
+-----------+--------------+-------------------+
|       107 | garima Verma |                40 |
|       103 | Sneha Patil  |                 6 |
|       101 | Richa Sharma |                 5 |
|       106 | Karan Mehta  |                 5 |
|       102 | Amit Verma   |                 4 |
|       105 | Priya Nair   |                 4 |
|       104 | Rajesh Singh |                 3 |
+-----------+--------------+-------------------+
7 rows in set (0.00 sec)

Q30.List the Book No, Book Name, Issue_date and Return_Date for all
the books issued by Richa Sharma.

mysql> select b.book_no,b.book_name,i.issue_date,i.return_date from issue i inner join books b on i.book_no=b.book_no inner join member m on m.member_id=i.member_id where m.member_name="Richa Sharma";
+---------+---------------+------------+-------------+
| book_no | book_name     | issue_date | return_date |
+---------+---------------+------------+-------------+
|     101 | Let us C      | 2006-12-10 | 2006-12-20  |
|     104 | The Alchemist | 2006-01-15 | 2006-01-30  |
|     101 | Let us C      | 2006-07-04 | 2031-12-06  |
+---------+---------------+------------+-------------+
3 rows in set (0.00 sec)

Q31.List the details of all the members that have issued books in
Database category.

mysql> select* from member m inner join issue i on m.member_id=i.member_id inner join books b on i.book_no=b.book_no where category="database";
Empty set (0.01 sec)

Q32.List all the books that have highest price in their own category.

mysql> SELECT b.book_name, b.category, b.cost
    -> FROM books b
    -> JOIN (
    ->     SELECT category, MAX(cost) AS max_cost
    ->     FROM books
    ->     GROUP BY category
    -> ) m ON b.category = m.category AND b.cost = m.max_cost;
+------------------------------------------+----------+---------+
| book_name                                | category | cost    |
+------------------------------------------+----------+---------+
| Harry Potter and the Philosopher's Stone | Fiction  |  500.00 |
| Unix System Programming                  | System   |  720.00 |
| National Geographic                      | Others   | 1000.00 |
| PL SQL-Ref                               | Database |  750.00 |
+------------------------------------------+----------+---------+
4 rows in set (0.07 sec)
			or

SELECT b.book_name, b.category, b.cost
FROM books b
WHERE b.cost = (
    SELECT MAX(cost)
    FROM books
    WHERE category = b.category
);

Q33.List all the Issue_Details where Issue_date is not within the
Acc_open_date and Return_date for that member.

mysql> select i.*
    -> from issue i
    -> inner join  member m ON i.member_id = m.member_id
    -> where i.issue_date not between m.Acc_Open_Date and i.return_date;
+--------------+---------+-----------+------------+-------------+
| lib_issue_id | book_no | member_id | issue_date | return_date |
+--------------+---------+-----------+------------+-------------+
|         7002 |     102 |       102 | 2006-12-25 | 2031-12-06  |
|         7005 |     104 |       102 | 2006-11-15 | 2006-11-25  |
|         7006 |     101 |       103 | 2006-02-18 | NULL        |
+--------------+---------+-----------+------------+-------------+
3 rows in set (0.00 sec)

Q34.List all the members that have not issued a single book so far.

mysql> SELECT m.member_id, m.member_name
    -> FROM member m
    -> LEFT JOIN issue i ON m.member_id = i.member_id
    -> WHERE i.member_id IS NULL;
+-----------+--------------+
| member_id | member_name  |
+-----------+--------------+
|       104 | Rajesh Singh |
|       105 | Priya Nair   |
|       106 | Karan Mehta  |
|       107 | garima Verma |
+-----------+--------------+
4 rows in set (0.07 sec)

Q35.List all the members that have issued the same book as issued by
Garima.

mysql> select i.book_no from member m inner join issue i on m.member_id=i.member_id where member_name="richa sharma";
+---------+
| book_no |
+---------+
|     101 |
|     104 |
|     101 |
+---------+
3 rows in set (0.01 sec)

mysql> select member_id from issue where book_no in (101,104);
+-----------+
| member_id |
+-----------+
|       101 |
|       101 |
|       101 |
|       102 |
|       103 |
+-----------+
5 rows in set (0.01 sec)

				OR

SELECT DISTINCT i.member_id
FROM issue i
WHERE i.book_no IN (
    SELECT i1.book_no
    FROM member m
    JOIN issue i1 ON m.member_id = i1.member_id
    WHERE m.member_name = 'Richa Sharma'
)
AND i.member_id <> (
    SELECT member_id 
    FROM member 
    WHERE member_name = 'Richa Sharma'
);

Q36.List the Book_Name, Price of all the books that are not returned
for more then 30 days.

mysql> select b.book_name,b.cost from books b inner join issue i on b.book_no=i.book_no where datediff(i.return_date, i.issue_date)>30;
+-------------------+--------+
| book_name         | cost   |
+-------------------+--------+
| Operating Systems | 700.00 |
| Let us C          | 450.00 |
+-------------------+--------+
2 rows in set (0.01 sec)

Q37.List all the authors and book_name that has more then 1 book
written by them.

mysql> select book_name,author_name from books where author_name in (select author_name from books group by author_name having count(*)>2);
+---------------------+---------------+
| book_name           | author_name   |
+---------------------+---------------+
| Let us C            | Denis Ritchie |
| Oracle Complete Ref | Denis Ritchie |
| PL SQL-Ref          | Denis Ritchie |
+---------------------+---------------+
3 rows in set (0.00 sec)

Q38.List the Member ID, Member Name of the people that have issued
the highest and the lowest no of books.

mysql> (select m.member_id,m.member_name,count(book_no) from member m inner join issue i on m.member_id=i.member_id group by i.member_id,m.member_name order by count(book_no) desc limit 1)
    -> union
    ->  (select m.member_id,m.member_name,count(book_no) from member m inner join issue i on m.member_id=i.member_id group by i.member_id,m.member_name order by count(book_no) asc limit 1);
+-----------+--------------+----------------+
| member_id | member_name  | count(book_no) |
+-----------+--------------+----------------+
|       101 | Richa Sharma |              3 |
|       103 | Sneha Patil  |              1 |
+-----------+--------------+----------------+
2 rows in set (0.05 sec)

Q39.List the details of highest 3 priced books.

mysql> select * from books order by cost desc limit 3;
+---------+-------------------------+-----------------+---------+----------+
| Book_No | Book_Name               | Author_name     | cost    | Category |
+---------+-------------------------+-----------------+---------+----------+
|     109 | National Geographic     | Adis Scott      | 1000.00 | Others   |
|     112 | PL SQL-Ref              | Denis Ritchie   |  750.00 | Database |
|     107 | Unix System Programming | William Stevens |  720.00 | System   |
+---------+-------------------------+-----------------+---------+----------+
3 rows in set (0.00 sec)

Q40.List the total cost of all the books that are currently issued but not
returned.

mysql> select sum(b.cost) "total_sum" from books b inner join issue i on b.book_no=i.book_no where i.return_date is null;

Q41.List the details of the book that has been issued maximum no of
times.

mysql> select * from books where book_no=(select book_no from issue group by book_no order by count(*) desc limit 1);
+---------+-----------+---------------+--------+----------+
| Book_No | Book_Name | Author_name   | cost   | Category |
+---------+-----------+---------------+--------+----------+
|     101 | Let us C  | Denis Ritchie | 450.00 | System   |
+---------+-----------+---------------+--------+----------+
1 row in set (0.00 sec)

Q42.List how many books are issued to lifetime members.

mysql> select count(i.book_no) from issue i inner join member m on m.member_id=i.member_id where  Membership_type="lifetime";
+------------------+
| count(i.book_no) |
+------------------+
|                4 |
+------------------+
1 row in set (0.02 sec)

Q43.List all member types and how many members are there in each
type.

mysql> select membership_type,count(*) from member group by membership_type;
+-----------------+----------+
| membership_type | count(*) |
+-----------------+----------+
| Lifetime        |        3 |
| Annual          |        3 |
| Half-Yearly     |        1 |
+-----------------+----------+
3 rows in set (0.01 sec)


Q44.List first 5 members who had joined library.

mysql> select member_name from member order by Acc_Open_Date limit 5;
+--------------+
| member_name  |
+--------------+
| Richa Sharma |
| Amit Verma   |
| garima Verma |
| Sneha Patil  |
| Rajesh Singh |
+--------------+
5 rows in set (0.01 sec)

Q45.List the members with their member type, who have issued books

during the period 1st December to 31st December.

mysql> select m.member_name ,m.Membership_type from member m inner join issue i on m.member_id=i.member_id where i.issue_date between '2006-12-01' and '2006-12-31';
+--------------+-----------------+
| member_name  | Membership_type |
+--------------+-----------------+
| Richa Sharma | Lifetime        |
| Amit Verma   | Annual          |
+--------------+-----------------+
2 rows in set (0.00 sec)

Q46.List all the members who have not returned books yet.

mysql> select distinct member_id from issue where return_date is null;
+-----------+
| member_id |
+-----------+
|       103 |
+-----------+
1 row in set (0.01 sec)

Q47.mysql> select member_name from member where member_name <> "garima Verma" and Acc_Open_Date=(select Acc_Open_Date from member where member_name="garima Verma");
+-------------+
| member_name |
+-------------+
| Amit Verma  |
+-------------+
1 row in set (0.00 sec)

Q48.List all the members who has issued books from author “Loni” in
the month of December

mysql> select i.member_id from issue i inner join books b on i.book_no=b.book_no where author_name="loni" and  month(issue_date)=12;
Empty set (0.01 sec)

Q49.List names of the authors whose books are least issued by

lifetime members.


mysql> select b.author_name,count(*) from books b inner join issue i on b.book_no=i.book_no inner join member m on m.member_id=i.member_id where membership_type="lifetime" group by b.author_name order by aes limit 1;
+---------------+----------+
| author_name   | count(*) |
+---------------+----------+
| Denis Ritchie |        3 |
| Paulo Coelho  |        1 |
+---------------+----------+
+---------------+
| author_name   |
+---------------+
| Denis Ritchie |
| Paulo Coelho  |
| Denis Ritchie |
| Denis Ritchie |
+---------------+

Q50.List the names of members who has issued the books whose cost
is more than 300 rupees and whose author is “Scott Urman”

mysql> select m.member_name from books b inner join issue i on b.book_no=i.book_no inner join member m on m.member_id=i.member_id where cost>300 and b.author_name="Scott Urman" ;
Empty set (0.00 sec)

Q51.List all lifetime members who joined library during 1st January
2006 to 31st December 2006 but issued only one book.

mysql> select distinct m.member_name,count(*) from member m inner join issue i on m.member_id = i.member_id where membership_type="lifetime" and issue_date between "2006-01-01" and "2006-12-31" group by m.member_name having count(*)=1;
+-------------+----------+
| member_name | count(*) |
+-------------+----------+
| Sneha Patil |        1 |
+-------------+----------+
1 row in set (0.00 sec)

Q52.
mysql> select distinct m.member_name,count(*) from member m inner join issue i on m.member_id = i.member_id where membership_type="lifetime" and issue_date between "2006-01-01" and "2006-12-31" group by m.member_name having count(*)=1;
+-------------+----------+
| member_name | count(*) |
+-------------+----------+
| Sneha Patil |        1 |
+-------------+----------+
1 row in set (0.00 sec)

Q52.Modify the Penalty_Amount for Garima Sen to Rs 100.

mysql> update member set Penalty_Amount =100
    -> where member_name ="garima Verma";
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> table member;
+-----------+--------------+----------------+---------------+-----------------+-----------+-------------------+----------------+
| member_id | member_name  | Member_address | Acc_Open_Date | Membership_type | Fees_paid | max_books_allowed | Penalty_Amount |
+-----------+--------------+----------------+---------------+-----------------+-----------+-------------------+----------------+
|       101 | Richa Sharma | Pune           | 2005-10-12    | Lifetime        |     25000 |                 5 |          50.00 |
|       102 | Amit Verma   | Mumbai         | 2007-03-21    | Annual          |      5000 |                 4 |          20.00 |
|       103 | Sneha Patil  | Delhi          | 2009-07-15    | Lifetime        |     20000 |                 6 |          40.00 |
|       104 | Rajesh Singh | Nagpur         | 2011-11-30    | Half-Yearly     |      3000 |                 3 |          15.00 |
|       105 | Priya Nair   | Bangalore      | 2013-05-18    | Annual          |      6000 |                 4 |          25.00 |
|       106 | Karan Mehta  | Hyderabad      | 2016-09-05    | Lifetime        |     22000 |                 5 |          35.00 |
|       107 | garima Verma | Mumbai         | 2007-03-21    | Annual          |     50000 |                40 |         100.00 |
+-----------+--------------+----------------+---------------+-----------------+-----------+-------------------+----------------+
7 rows in set (0.00 sec)































































































































